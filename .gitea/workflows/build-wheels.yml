name: Build and Publish Linux Wheels

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
        
    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
      
    - name: Create virtual environment
      run: uv venv
      
    - name: Install maturin
      run: uv pip install maturin[patchelf]
      
    - name: Run Rust tests
      run: cargo test --verbose
      
    - name: Install Python dependencies and run Python tests
      run: |
        # Install Python dependencies needed for testing
        uv pip install pytest pandas pyarrow
        
        # Build the Python module for testing (development mode)
        uv run maturin develop
        
        # Run Python tests
        uv run python -m pytest tests/test_bitemporal.py -v
        
    - name: Run benchmarks (smoke test)
      run: |
        # Run a quick benchmark to ensure no major performance regressions
        # Set shorter benchmark duration for CI speed
        CRITERION_SAMPLE_SIZE=10 timeout 180 cargo bench --bench bitemporal_benchmarks || echo "Benchmark completed or timed out"

  build-linux-wheels:
    needs: test  # Only run if tests pass
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}-unknown-linux-gnu
        
    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        
    - name: Set up cross-compilation environment
      if: matrix.target == 'aarch64'
      run: |
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
        
    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
      
    - name: Create virtual environment
      run: uv venv
      
    - name: Install maturin
      run: uv pip install maturin[patchelf]
      
    - name: Build wheel
      run: |
        # Find the Python interpreter path
        PYTHON_PATH=$(which python3)
        echo "Using Python interpreter: $PYTHON_PATH"
        
        if [ "${{ matrix.target }}" = "x86_64" ]; then
          uv run maturin build --release --out dist --find-interpreter
        else
          uv run maturin build --release --target ${{ matrix.target }}-unknown-linux-gnu --out dist -i $PYTHON_PATH
        fi
        
    - name: List built wheels
      run: ls -la dist/
      
    - name: Upload wheel as artifact
      uses: actions/upload-artifact@v3
      with:
        name: wheels-linux-${{ matrix.target }}
        path: dist/*.whl
        
  publish-to-gitea:
    needs: build-linux-wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')  # Only publish on version tags
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all wheel artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist-all/
        
    - name: Flatten wheel directory
      run: |
        mkdir -p dist/
        find dist-all/ -name "*.whl" -exec cp {} dist/ \;
        ls -la dist/
        
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install twine
      run: pip install twine
      
    - name: Configure package index
      run: |
        cat > ~/.pypirc << EOF
        [distutils]
        index-servers = gitea
        
        [gitea]
        repository = ${{ secrets.GITEA_PACKAGE_URL }}/simple/
        username = ${{ secrets.GITEA_USERNAME }}
        password = ${{ secrets.GITEA_TOKEN }}
        EOF
        
    - name: Publish to Gitea Package Registry
      run: |
        twine upload --repository gitea dist/*.whl
        
    - name: Create release notes
      run: |
        cat > release_notes.md << EOF
        # Release ${{ steps.version.outputs.VERSION }}
        
        ## Linux Wheels Built
        - x86_64 (Intel/AMD 64-bit)
        - aarch64 (ARM 64-bit)
        
        ## Installation
        \`\`\`bash
        # Install from Gitea package registry
        pip install --index-url ${{ secrets.GITEA_PACKAGE_URL }}/simple/ bitemporal-timeseries==${{ steps.version.outputs.VERSION }}
        \`\`\`
        
        ## Features
        - High-performance bitemporal timeseries processing
        - Microsecond precision timestamps for audit trails
        - Conflation optimization for reduced storage
        - Adaptive parallelization for large datasets
        EOF
        
    - name: Create Gitea Release
      uses: actions/gitea-release@v1
      with:
        gitea_url: ${{ github.server_url }}
        token: ${{ secrets.GITEA_TOKEN }}
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body_path: release_notes.md
        files: dist/*.whl