name: Build and Publish Linux Wheels

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    - name: Create virtual environment
      run: uv venv
    - name: Install maturin
      run: uv pip install maturin[patchelf]
    - name: Run Rust tests
      run: cargo test --verbose
    - name: Install Python dependencies and run Python tests
      run: |
        uv pip install pytest pandas pyarrow
        uv run maturin develop
        uv run python -m pytest tests/test_bitemporal.py -v
    - name: Run benchmarks (smoke test)
      run: |
        CRITERION_SAMPLE_SIZE=10 cargo bench --bench bitemporal_benchmarks

  build-linux-wheels:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}-unknown-linux-gnu
    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    - name: Create virtual environment
      run: uv venv
    - name: Install maturin
      run: uv pip install maturin[patchelf]
    - name: Build wheel
      run: |
        PYTHON_PATH=$(which python3)
        echo "Using Python interpreter: $PYTHON_PATH"
        uv run maturin build --release --out dist --find-interpreter
    - name: Upload wheel as artifact
      uses: actions/upload-artifact@v4
      with:
        name: wheels-linux-${{ matrix.target }}
        path: dist/*.whl

  publish-release:
    needs: build-linux-wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Download wheel artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist-all/
    - name: Flatten wheel directory
      run: |
        mkdir -p dist/
        find dist-all/ -name "*.whl" -exec cp {} dist/ \;
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    - name: Upload GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.version.outputs.VERSION }}
        files: dist/*.whl
        generate_release_notes: true
        body: |
          ## Installation
          ```bash
          pip install --no-index --find-links="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}" bitemporal-timeseries==${{ steps.version.outputs.VERSION }}
          ```

          ## Features
          - High-performance bitemporal timeseries processing
          - Microsecond precision timestamps for audit trails
          - Conflation optimization for reduced storage
          - Adaptive parallelisation for large datasets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  benchmarks:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Install uv
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    - name: Create virtual environment
      run: uv venv
    - name: Install maturin
      run: uv pip install maturin[patchelf]
    - name: Run Criterion benchmarks (generate HTML reports)
      run: |
        cargo bench --bench bitemporal_benchmarks
        mkdir -p site
        cp -r target/criterion/* site/
    - name: Upload pages artifact
      uses: actions/upload-pages-artifact@v3   # upgraded to v3
      with:
        path: site

  deploy-benchmarks:
    needs: benchmarks
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v4   # upgraded to v4
      id: deployment

  publish-pypi:
    needs: build-linux-wheels  # or 'needs: publish-release' if you want PyPI only after GitHub release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')  # only on version tags
    steps:
      - name: Check out repository (needed by pypa publish action)
        uses: actions/checkout@v4

      - name: Download built wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux-x86_64   # match the artifact name from build-linux-wheels
          path: dist/

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1
        with:
          packages_dir: dist/
          skip_existing: true